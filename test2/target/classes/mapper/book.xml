<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="book">	<!-- namespace를 길게 사용하는 경우: daoImpl을 만들지 않고 dao만 만들 경우 -->

	<!-- 
		Qname이 길면 daoimpl이 생략될 수 있음.
		Qname이란?
	-->

	<!-- include -->
	<!-- 공통된 코드를 축약시킴 -->
	<!-- 프로그래밍에 있어서 중복성을 최대한 없애라! -->
	<sql id="search">
		select * from book
		<!-- where태그란? 안에 있는 조건이 성립했을때왜 성립하지않았을때의 경우를 각각 만들 필요가 없이 조건이 성립하지 않는다면 해당 태그자체가 실행이 안됨 -->
		<where>
			<!-- 검색 내용이 있을 경우 -->
			<if test="search == 1">
				bookid=#{keyword}
			</if>
			
			<if test="search == 2">
				bookname LIKE concat(concat('%', #{keyword}, '%'))
			</if>
			
			<if test="search == 3">
				publisher LIKE concat(concat('%', #{keyword}, '%'))
			</if>
		</where>
	</sql>

	<!-- 전체 book테이블 안의 데이터 개수 추출함. -->
	<select id = "total" resultType="Integer">
		select count(*) from (<include refid="search"></include>)<!-- 원래 쿼리가 일치함 -->
	</select>

	<!-- mybatis에서 쿼리를 날려서 결과값이 나오면 Book 객체를 새로 생성해서 필드명과 일치하는 컬럼을 찾아서 setter를 사용해서 그 값을 설정해줌. 이런식으로 여러개의 Book객체를 list 양만큼 생성해줌 -->
	<!-- 주의할 점: 필드명과 컬럼명이 일치해야함. -->
	<select id="list" resultType="Book">	<!-- mybatis-config.xml에서 alias를 걸었기 때문에 패키지명을 생략한 별칭 사용 -->
		select * from
		(
			select sub.*, ROWNUM rnum from
			(<include refid="search"></include><!-- 원래 쿼리가 일치함 -->)sub
		)
			where rnum BETWEEN ((#{page} - 1) * (#{perPage} +1)) AND (#{perPage} * #{perPage})
	</select>
	
	<!-- 현재 나한테 부족한 부분 = 중복성 제거 -->
	<!-- mysql기반일 경우 -->
<!--<select id="list" resultType="Book">	mybatis-config.xml에서 alias를 걸었기 때문에 패키지명을 생략한 별칭 사용
		select * from
			(<include refid="search"></include>원래 쿼리가 일치함)sub
			
			<if test="parPage != 0">
				limit #{offset}, #{perPage}
			</if>
	</select> -->
	
	<!-- 가장 마지막 bookid 호출 -->
	<select id="getLastBookid" resultType="Long">
		select MAX(bookid) from book
	</select>
	
	<!-- 안교수님이 하신 방식과는 다르게 foreach문을 돌면서 대량등록하도록 구현 -->
	<insert id="addDummy" parameterType="java.util.List">
		INSERT ALL
	    <foreach collection="list" item="item">
	    	INTO book
	    	VALUES (#{item.bookid}, #{item.bookname}, #{item.publisher}, #{item.price}, #{item.recentlyId})
	    </foreach>
	    SELECT * FROM dual
	</insert>
	
	<!-- 시퀀스 동기화 -->
    <update id="bookSeqUpdate" parameterType="java.lang.Long">
        DECLARE
            v_curr_seq NUMBER;
            v_target_seq NUMBER := #{value};
        BEGIN
            SELECT BOOK_SEQ.NEXTVAL INTO v_curr_seq FROM dual;
            IF v_target_seq > v_curr_seq THEN
                EXECUTE IMMEDIATE 'ALTER SEQUENCE BOOK_SEQ INCREMENT BY ' || (v_target_seq - v_curr_seq);
                SELECT BOOK_SEQ.NEXTVAL INTO v_curr_seq FROM dual;
                EXECUTE IMMEDIATE 'ALTER SEQUENCE BOOK_SEQ INCREMENT BY 1';
            END IF;
        END;
    </update>
	
	<insert id="add">
		insert into book
		values(BOOK_SEQ.NEXTVAL, #{bookname}, #{publisher}, #{price}, null)
	</insert>
	
	<insert id="saveRecentlyId">
		insert into recently
		values(RECENTLY_SEQ.NEXTVAL)
		<selectKey keyProperty="recentlyId" resultType="Long" order="AFTER">
			select RECENTLY_SEQ.currval FROM dual
		</selectKey>
	</insert>
	
	<select id="selectRecently" resultType="Integer">
		select max(recentlyId) from recently
	</select>
	
	<select id="item" resultType="Book">
		select * from book
		where bookid=#{bookid}
	</select>
	
	<update id="update">
		update book
		set bookname=#{bookname}, publisher=#{publisher}, price=#{price}
		where bookid=#{bookid}
	</update>
	
	<delete id="init">
		delete from book
		where recentlyId=#{recentlyId}
	</delete>
	
	<delete id="delete">
		delete from book
		where bookid=#{bookid}
	</delete>
</mapper>
